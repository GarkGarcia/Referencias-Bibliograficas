#!/usr/bin/ruby

require 'asciidoctor'
require 'json'

OUTPUT = File::open  "index.html", "w"
FAVICON = "./assets/favicon.svg"
NOMES = {
    "MAT" => "Matemática",
    "MAP" => "Matemática Aplicada",
    "MAE" => "Estatística",
    "MAC" => "Computação"
}

class Integer
  ROMAN_NUMBERS = {
    1000 => "M",
     900 => "CM",
     500 => "D",
     400 => "CD",
     100 => "C",
      90 => "XC",
      50 => "L",
      40 => "XL",
      10 => "X",
       9 => "IX",
       5 => "V",
       4 => "IV",
       1 => "I",
  }

  def roman
    n = self
    roman = ""

    ROMAN_NUMBERS.each do |value, letter|
      roman << letter*(n / value)
      n = n % value
    end

    roman
  end
end

class String
    def upcase?
        !self[/[[:lower:]]/]
    end
end

# Public: Cria a seção de um dado departamento.
def department parent, dep, discs
    sec = Asciidoctor::Section::new parent, 1
    sec.title = "Departamento de #{NOMES[dep]}"
    sec.numbered = false
    sec.id = dep.downcase
    
    discs.sort_by { |d| d["code"] }

    for disc in discs do 
        nome = disc["nome"]
        refs = disc["references"]

        sec << (subject sec, code(dep, disc["code"]), nome, refs)
    end

    sec
end

def subject parent, code, nome, refs
    sec = Asciidoctor::Section::new parent, 2
    sec.title = "#{code} - #{nome}"
    sec.numbered = false
    sec.id = code.downcase
    
    refs.sort_by { |ref| ref["title"] }

    list = Asciidoctor::List::new sec, :ulist
    sec << list

    for ref in refs.sort_by do
        list << (reference list, ref)
    end

    sec
end

def reference parent, ref
    authores = ref["authores"]
        .sort
        .map { |nome| author nome }
        .join ". ; "

    src = "#{authores}. #{title ref}. #{ref["ano"]}"
    item = Asciidoctor::ListItem::new parent, src
    links = Asciidoctor::List::new item, :ulist

    ref["links"].sort_by(&:first).each do |format, url|
        links << (link links, url, "Download em #{format.strip.upcase}")
    end

    item << links
end

def author nome 
    nomes = nome.split(/ +/)
    first_names = nomes[0..-2]
        .map { |nome| nome[0, 1] }
        .select(&:upcase?)
        .join '. '
    
    "#{nomes.last.upcase}, #{first_names}"
end

def title ref
    output = "_#{ref["title"].strip}_"

    if ref["subtitle"]
        output << ": _#{ref["subtitle"].strip}_"
    end

    if ref["volume"] && ref["volume"].class == Integer
        output << ", _vol. #{ref["volume"].roman}_"
    end

    output
end

def code dep, c
    if c.upcase.start_with? dep.upcase
        c = c[3..-1]
    end

    dep.upcase + c.rjust(4, "0")
end

def link parent, url, text
    txt =  "<strong>#{text}</strong>"
    output = Asciidoctor::ListItem::new parent, ""
    anchor = Asciidoctor::Inline::new output, :anchor, txt, {:type => :link}

    if url.start_with? "http"
        anchor.target = url
    else
        anchor.target = "https://#{url}"
    end

    output << anchor
end

# Carrega a introdução
doc = Asciidoctor::load_file "intro.adoc", {:header_footer => true}

# Carrega os dados a serem adicionados
deps = File::open "references.json", "r"
deps = JSON.parse(deps.read)

# Adiciona a informação de cada department

deps.sort_by(&:first).each do |dep, discs|
    if discs.length > 0
        doc << (department doc, dep, discs)
    end
end

# Salva o site
OUTPUT.write doc.convert

