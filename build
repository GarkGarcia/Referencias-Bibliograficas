#!/usr/bin/ruby

require "asciidoctor"
require "csv"

OUTPUT = File::open  "index.html", "w"
DEPARTMENTS = CSV::read "data/departments.csv", headers: true
CODE = "CÓDIGO"
NAME = "NOME"
TITLE = "TÍTULO"
VOLUME = "VOLUME"
AUTHORS = "AUTORES"
YEAR = "ANO"
PDF = "PDF"
DJVU = "DJVU"
EPUB = "EPUB"

class Integer
  ROMAN_NUMBERS = {
    1000 => "M",
     900 => "CM",
     500 => "D",
     400 => "CD",
     100 => "C",
      90 => "XC",
      50 => "L",
      40 => "XL",
      10 => "X",
       9 => "IX",
       5 => "V",
       4 => "IV",
       1 => "I",
  }

  def roman
    n = self
    roman = ""

    ROMAN_NUMBERS.each do |value, letter|
      roman << letter*(n / value)
      n = n % value
    end

    roman
  end
end

class String
    TITLELIZE_OMIT = [
        "de",
        "com",
        "um", 
        "uma",
        "ao", 
        "à",
        "em",
        "to", 
        "of", 
        "and",
        "in",
        "a", 
        "an", 
        "the"
    ].to_set

    def upcase?
        !self[/[[:lower:]]/]
    end

    def titlelize
        words = self.strip.split(/ +/)
        titlelized_words = words.map.with_index do |word, i|
            if TITLELIZE_OMIT.include?(word.downcase) && i != 0 
                word.downcase
            else
                word.capitalize
            end
        end

        titlelized_words.join " "
    end
end

# Public: Classe que representa a seção do site dedicada a um departamento 
# (MAT, MAC, etc)
class Department
    attr_reader :subjects, :code, :name
    
    # Os dados correspondentes a todas as disciplinas
    SUBJECTS = CSV::read "data/subjects.csv", headers: true

    def initialize code, name
        @subjects = []
        @code = code
        @name = name.strip

        SUBJECTS.each do |sub|
            if sub[CODE].start_with? code
                subject = Subject::new(sub[CODE], sub[NAME])
                @subjects << subject if !subject.empty?
            end
        end
        
        @subjects.uniq!
        @subjects.sort_by! { |sub| sub.code.strip }
    end

    # Public: Gera a seção de `Asciidoc` correspondente a esse departamento
    def render parent
        sec = Asciidoctor::Section::new parent, 1
        sec.title = @name
        sec.numbered = false
        sec.id = @code.downcase

        for subject in @subjects do
            sec << subject.render(sec)
        end

        sec
    end

    # Public: Indica se existe conteúdo nessa seção, isto é, se existe alguma 
    # disciplina nesse departamento (da qual possuimos informações)
    def empty?
        @subjects.empty?
    end
end

# Public: Classe que representa a seção do site dedicada a uma disciplina 
# (MAT0205, MAC0110, etc)
class Subject
    attr_reader :code, :references

    # Os dados correspondentes a todas as referências bibliográficas
    REFERENCES = CSV::read "data/references.csv", headers: true

    def initialize code, name
        @references = []
        @code = code
        @name = name.strip

        REFERENCES.each do |ref|
            if ref[CODE] == code
                title = ref[TITLE]
                volume = ref[VOLUME]
                authors = ref[AUTHORS].split(/ *; */)
                year = ref[YEAR]
                links = {}

                links[PDF]  = ref[PDF]  if ref[PDF]
                links[DJVU] = ref[DJVU] if ref[DJVU]
                links[EPUB] = ref[EPUB] if ref[EPUB]

                reference = Reference::new(title, volume, authors, year, links)
                @references << reference 
            end
        end

        @references.sort_by! { |reference| reference.title.strip }
    end

    # Public: Gera a seção de `Asciidoc` correspondente a essa disciplina
    def render parent
        sec = Asciidoctor::Section::new parent, 2
        sec.title = "#{@code} - #{@name}"
        sec.numbered = false
        sec.id = code.downcase

        list = Asciidoctor::List::new sec, :ulist
        sec << list

        for reference in @references do
            list << reference.render(list)
        end

        sec
    end

    def ==(other)
        case other
        when Subject
            self.code == other.code
        else
            false
        end
    end
    # Public: Indica se existe conteúdo nessa seção, isto é, se existe alguma 
    # referência bibliográfica nessa disciplina (da qual possuimos informações)
    def empty?
        @references.empty?
    end
end

# Public: Classe que representa a seção do site dedicada a uma referência 
# ("HOFFMAN, K. ; KUNZE, R. Álgebra Linear. 1971", etc)
class Reference
    attr_reader :title, :volume, :authors, :year, :links

    def initialize title, volume, authors, year, links
        @title = format_title title, volume
        @year = year

        @links = links
            .sort_by(&:first)
            .map { |format, url| Link::new(format, url) }

        @authors = authors
            .sort
            .map { |name| format_author name }
            .join ". ; "
    end

    # Public: Gera a seção de `Asciidoc` correspondente a essa referência
    def render parent
        src = "#{@authors}. #{@title}. #{@year}"
        item = Asciidoctor::ListItem::new parent, src

        if !@links.empty?
            links = Asciidoctor::List::new item, :ulist

            for link in @links do
                links << link.render(links)
            end

            item << links
        end

        item
    end
end

# Public: Classe que representa uma entrada na lista de links de download
class Link
    attr_reader :format, :url

    INLINE_OPTS = {:type => :link}

    def initialize format, url
        @format = format.upcase
        
        if url.start_with? "http"
            @url = url
        else
            @url = "https://#{url}"
        end
    end

    # Public: Gera o item de `Asciidoc` correspondente a essa entrada
    def render parent
        txt =  "<strong>Download em #{@format}</strong>"

        output = Asciidoctor::ListItem::new parent, ""
        anchor = Asciidoctor::Inline::new output, :anchor, txt, INLINE_OPTS
        anchor.target = @url

        output << anchor
    end
end

# Public: Formata o nome do autor adequadamente
def format_author name 
    names = name.split(/ +/)
    first_names = names[0..-2]
        .map { |name| name[0, 1] }
        .select(&:upcase?)
        .join ". "
    
    "#{names.last.upcase}, #{first_names}"
end

# Public: Formata o título do livro adequadamente
def format_title title, volume
    secs = title.titlelize.split(/ *: */)
    title = secs[0]

    case secs.length
    when 1
        subtitle = nil
    when 2
        subtitle = secs[1]
    else
        raise ArgumentError
    end

    output = "_#{title.strip}_"
    output << ": _#{subtitle.strip}_" if subtitle

    case volume
    when Integer
        output << ", _vol. #{volume.roman}_"
    when String
        output << ", _vol. #{volume.to_i.roman}_"
    end

    output
end

# Carrega a introdução
doc = Asciidoctor::load_file "intro.adoc", {:header_footer => true}

# Adiciona a informação de cada department
DEPARTMENTS.each do |dep|
    department = Department::new dep[CODE], dep[NAME]
    doc << department.render(doc) if !department.empty?
end

# Salva o site
OUTPUT.write doc.convert

