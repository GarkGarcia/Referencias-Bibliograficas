#!/usr/bin/ruby

require "asciidoctor"
require "csv"

OUTPUT = File::open  "index.html", "w"
DEPARTMENT = {
    "MAT" => "Matemática",
    "MAP" => "Matemática Aplicada",
    "MAE" => "Estatística",
    "MAC" => "Computação"
}

CODE = "CÓDIGO"
NAME = "NOME"
TITLE = "TÍTULO"
VOLUME = "VOLUME"
AUTHORS = "AUTORES"
YEAR = "ANO"
PDF_LINK = "LINK PDF"

class Integer
  ROMAN_NUMBERS = {
    1000 => "M",
     900 => "CM",
     500 => "D",
     400 => "CD",
     100 => "C",
      90 => "XC",
      50 => "L",
      40 => "XL",
      10 => "X",
       9 => "IX",
       5 => "V",
       4 => "IV",
       1 => "I",
  }

  def roman
    n = self
    roman = ""

    ROMAN_NUMBERS.each do |value, letter|
      roman << letter*(n / value)
      n = n % value
    end

    roman
  end
end

class String
    def upcase?
        !self[/[[:lower:]]/]
    end
end

class Department
    attr_reader :subjects, :code
    
    SUBJECTS = CSV::read "data/subjects.csv", headers: true

    def initialize code
        @subjects = []
        @code = code

        SUBJECTS.each do |sub|
            if sub[CODE].start_with? code
                subject = Subject::new(sub[CODE], sub[NAME])
                @subjects << subject if !subject.empty?
            end
        end

        @subjects.sort_by(&:code)
    end

    def render parent
        sec = Asciidoctor::Section::new parent, 1
        sec.title = "Departamento de #{DEPARTMENT[@code]}"
        sec.numbered = false
        sec.id = @code.downcase

        for subject in @subjects do
            sec << subject.render(sec)
        end

        sec
    end

    def empty?
        @subjects.empty?
    end
end

class Subject
    attr_reader :code, :references

    REFERENCES = CSV::read "data/references.csv", headers: true

    def initialize code, name
        @references = []
        @code = code
        @name = name.strip

        REFERENCES.each do |ref|
            if ref[CODE] == code
                title = ref[TITLE]
                volume = ref[VOLUME]
                authors = ref[AUTHORS].split(/ *; */)
                year = ref[YEAR]
                links = {"PDF" => ref[PDF_LINK]}

                reference = Reference::new(title, volume, authors, year, links)
                @references << reference 
            end
        end

        @references.sort_by { |reference| reference.title }
    end

    def render parent
        sec = Asciidoctor::Section::new parent, 2
        sec.title = "#{@code} - #{@name}"
        sec.numbered = false
        sec.id = code.downcase

        list = Asciidoctor::List::new sec, :ulist
        sec << list

        for reference in @references do
            list << reference.render(list)
        end

        sec
    end

    def empty?
        @references.empty?
    end
end

class Reference
    attr_reader :title, :volume, :authors, :year, :links

    def initialize title, volume, authors, year, links
        @title = format_title title, volume
        @year = year
        @links = links

        @authors = authors
            .sort
            .map { |name| format_author name }
            .join ". ; "
    end

    def render parent
        src = "#{@authors}. #{@title}. #{@year}"
        item = Asciidoctor::ListItem::new parent, src

        if !@links.empty?
            links = Asciidoctor::List::new item, :ulist

            @links.sort_by(&:first).each do |format, url|
                links << link(links, url, "Download em #{format.strip.upcase}")
            end

            item << links
        end

        item
    end
end

def format_author name 
    names = name.split(/ +/)
    first_names = names[0..-2]
        .map { |name| name[0, 1] }
        .select(&:upcase?)
        .join ". "
    
    "#{names.last.upcase}, #{first_names}"
end

def format_title title, volume
    secs = title.split(/ *; */)

    case secs.length
    when 1
        title = secs[0]
        subtitle = nil
    when 2
        title = secs[0]
        subtitle = secs[1]
    end

    output = "_#{title.strip}_"
    output << ": _#{subtitle.strip}_" if subtitle

    case volume
    when Integer
        output << ", _vol. #{volume.roman}_"
    when String
        begin
            volume = volume.to_i
            output << ", _vol. #{volume.roman}_"
        rescue ArgumentError
            output << ", _vol. #{volume.upcase}_"
        end
    end

    output
end

def link parent, url, text
    txt =  "<strong>#{text}</strong>"
    output = Asciidoctor::ListItem::new parent, ""
    anchor = Asciidoctor::Inline::new output, :anchor, txt, {:type => :link}

    if url.start_with? "http"
        anchor.target = url
    else
        anchor.target = "https://#{url}"
    end

    output << anchor
end

# Carrega a introdução
doc = Asciidoctor::load_file "intro.adoc", {:header_footer => true}

# Adiciona a informação de cada department
for dep_code in DEPARTMENT.keys do
    department = Department::new dep_code
    doc << department.render(doc) if !department.empty?
end

# Salva o site
OUTPUT.write doc.convert

